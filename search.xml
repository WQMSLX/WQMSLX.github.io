<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo next</title>
    <url>/2016/03/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>start</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo配置</title>
    <url>/2021/01/16/hexo/</url>
    <content><![CDATA[<h3 id="HEXO插入图片"><a href="#HEXO插入图片" class="headerlink" title="HEXO插入图片"></a>HEXO插入图片</h3><a id="more"></a>

<ol>
<li>安装插件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>打开hexo的配置文件_config.yml</p>
<p>找到post_asset_folder,将false改成true</p>
</li>
<li><p>打开</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js</span><br></pre></td></tr></table></figure>
<p>将内容更换为下面的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>现在就可以插入图片了，比如hexo new post photo之后<br>就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内</li>
</ol>
<p><img src="/2021/01/16/hexo/1.jpg"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NIO</title>
    <url>/2021/01/18/NIO/</url>
    <content><![CDATA[<p>NIO缓冲区,聚集与写入</p>
<a id="more"></a>

<h3 id="2-直接缓冲区和非直接缓冲区"><a href="#2-直接缓冲区和非直接缓冲区" class="headerlink" title="2. 直接缓冲区和非直接缓冲区"></a>2. 直接缓冲区和非直接缓冲区</h3><p><img src="/2021/01/18/NIO/image-20201230215518931.png"></p>
<p><img src="/2021/01/18/NIO/image-20201230215530044.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、缓冲区(Buffer)：在Java NIO中负责数据的存取，缓冲区就是数组，用于存储不同数据类型的数据。</span></span><br><span class="line"><span class="comment"> * 根据数据类型不同(boolean除外)，提供了相应类型的缓冲区</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ByteBuffer</span></span><br><span class="line"><span class="comment"> * CharBuffer</span></span><br><span class="line"><span class="comment"> * ShortBuffer</span></span><br><span class="line"><span class="comment"> * IntBuffer</span></span><br><span class="line"><span class="comment"> * LongBuffer</span></span><br><span class="line"><span class="comment"> * FloatBuffer</span></span><br><span class="line"><span class="comment"> * DoubleBuffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这些缓冲区的管理方式几乎一致，通过allocate()获取缓冲区。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 二、缓冲区存取数据的两个核心的方法：</span></span><br><span class="line"><span class="comment"> * put() 存入数据到缓冲区</span></span><br><span class="line"><span class="comment"> * get() 获取缓冲区的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 三、缓冲区中的四个核心属性：</span></span><br><span class="line"><span class="comment"> * capacity:容量，表示缓冲区中最大的存储数据的容量，一旦声明不能改变</span></span><br><span class="line"><span class="comment"> * limit:界限，表示缓冲区中可以操作数据的大小。(limit后数据不能进行读写)</span></span><br><span class="line"><span class="comment"> * position：位置，表示缓冲区中正在操作数据的位置。</span></span><br><span class="line"><span class="comment"> *      0 &lt;= mark &lt;=   position &lt;= limit &lt;= capacity</span></span><br><span class="line"><span class="comment"> * mark:标记，表示记录当前position的位置，通过reset()恢复到mark的位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 四、直接缓冲区和非直接缓冲区</span></span><br><span class="line"><span class="comment"> * 非直接缓冲区：通过allocate()分配缓冲区，将缓冲区建立在JVM的内存中</span></span><br><span class="line"><span class="comment"> * 直接缓冲区：通过allocateDirect()分配直接缓冲区，将缓冲区建立在物理内存中，可以提高效率。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.分配一个指定大小的缓冲区</span></span><br><span class="line">        ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------allocate()----------&quot;</span>);</span><br><span class="line">        System.out.println(buf.position());</span><br><span class="line">        System.out.println(buf.limit());</span><br><span class="line">        System.out.println(buf.capacity());<span class="comment">//0 1024 1024</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用put()存入数据到缓冲区</span></span><br><span class="line">        buf.put(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------put()----------&quot;</span>);</span><br><span class="line">        System.out.println(buf.position());</span><br><span class="line">        System.out.println(buf.limit());</span><br><span class="line">        System.out.println(buf.capacity()); <span class="comment">//5 1024 1024</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用flip()切换成读数据模式</span></span><br><span class="line">        buf.flip();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------flip()----------&quot;</span>);</span><br><span class="line">        System.out.println(buf.position());</span><br><span class="line">        System.out.println(buf.limit());</span><br><span class="line">        System.out.println(buf.capacity()); <span class="comment">//0 5 1024</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.利用get()读取缓冲区中的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.limit()];</span><br><span class="line">        buf.get(dst);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst, <span class="number">0</span>, dst.length));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------get()----------&quot;</span>);</span><br><span class="line">        System.out.println(buf.position());</span><br><span class="line">        System.out.println(buf.limit());</span><br><span class="line">        System.out.println(buf.capacity()); <span class="comment">//5 5 1024</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.rewind()可重复读数据</span></span><br><span class="line">        buf.rewind();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------rewind()----------&quot;</span>);</span><br><span class="line">        System.out.println(buf.position());</span><br><span class="line">        System.out.println(buf.limit());</span><br><span class="line">        System.out.println(buf.capacity()); <span class="comment">//0 5 1024</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.清空缓冲区，但是缓冲区里面的数据依然存在，数据存在被遗忘状态</span></span><br><span class="line">        buf.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------clear()----------&quot;</span>);</span><br><span class="line">        System.out.println(buf.position());</span><br><span class="line">        System.out.println(buf.limit());</span><br><span class="line">        System.out.println(buf.capacity()); <span class="comment">//0 1024 1024</span></span><br><span class="line"></span><br><span class="line">        System.out.println((<span class="keyword">char</span>)buf.get());<span class="comment">//a</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">        String str2 = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">        ByteBuffer buf2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        buf2.put(str2.getBytes());</span><br><span class="line"></span><br><span class="line">        buf2.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] dst2 = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.limit()];</span><br><span class="line">        buf2.get(dst2, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst2, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(buf2.position());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//mark() 标记</span></span><br><span class="line">        buf2.mark();</span><br><span class="line"></span><br><span class="line">        buf2.get(dst2, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dst2, <span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(buf2.position());<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//reset()恢复到mark的位置</span></span><br><span class="line">        buf2.reset();</span><br><span class="line">        System.out.println(buf2.position());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">        <span class="comment">//分配直接缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line">        System.out.println(buffer.isDirect()); <span class="comment">//判断是否是直接缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/18/NIO/image-20201231185301769.png"></p>
<h3 id="3-Channel"><a href="#3-Channel" class="headerlink" title="3. Channel"></a>3. Channel</h3><p><img src="/2021/01/18/NIO/image-20210103121854166.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 直接使用内存映射文件*/</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">      String path=<span class="string">&quot;D:\\图片\\&quot;</span>;</span><br><span class="line">      FileChannel inChannel = FileChannel.open(Paths.get(path+<span class="string">&quot;1.jpg&quot;</span>), StandardOpenOption.READ);</span><br><span class="line">      <span class="comment">/** 如果2.jpg不存在就创建*/</span></span><br><span class="line">      FileChannel outChannel = FileChannel.open(Paths.get(path+<span class="string">&quot;111.jpg&quot;</span>), StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE);</span><br><span class="line">      ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">      <span class="comment">//内存映射文件(原理和allocateDirect原理是一样) 通过物理内存映射文件</span></span><br><span class="line">      MappedByteBuffer inMapperBuf = inChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, inChannel.size());</span><br><span class="line">      MappedByteBuffer outMapperBuf = outChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, inChannel.size());</span><br><span class="line"></span><br><span class="line">      <span class="comment">/** 直接对缓冲区进行数据的读写操作*/</span></span><br><span class="line">      <span class="keyword">byte</span>[] dst = <span class="keyword">new</span> <span class="keyword">byte</span>[inMapperBuf.limit()];</span><br><span class="line">      inMapperBuf.get(dst);</span><br><span class="line">      outMapperBuf.put(dst);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//利用通道(非直接缓冲区)</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">      FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">      FileChannel inchannel = <span class="keyword">null</span>;</span><br><span class="line">      FileChannel outchannel = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          String path=<span class="string">&quot;D:\\图片&quot;</span>;</span><br><span class="line">          String fileName1=<span class="string">&quot;1.jpg&quot;</span>;</span><br><span class="line">          String fileName2=<span class="string">&quot;2.jpg&quot;</span>;</span><br><span class="line">          fis = <span class="keyword">new</span> FileInputStream(path + fileName1);</span><br><span class="line">          fos = <span class="keyword">new</span> FileOutputStream(path + fileName2);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//1获取通道</span></span><br><span class="line">          inchannel = fis.getChannel();</span><br><span class="line">          outchannel = fos.getChannel();</span><br><span class="line"></span><br><span class="line">          <span class="comment">//2分配指定大小的缓冲区</span></span><br><span class="line">          ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//3将通道中的数据放入缓冲区</span></span><br><span class="line">          <span class="keyword">while</span>(inchannel.read(buffer)!=-<span class="number">1</span>)&#123;</span><br><span class="line">              buffer.flip(); <span class="comment">//切换读取数据的模式</span></span><br><span class="line">              <span class="comment">//将缓冲区的数据写入到通道中</span></span><br><span class="line">              outchannel.write(buffer);</span><br><span class="line">              buffer.clear(); <span class="comment">//清空缓冲区</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  fis.close();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  fos.close();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(outchannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  outchannel.close();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(inchannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  inchannel.close();</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-分散-Scatter-与聚集-Gather"><a href="#4-分散-Scatter-与聚集-Gather" class="headerlink" title="4. 分散(Scatter)与聚集(Gather)"></a>4. 分散(Scatter)与聚集(Gather)</h3><ul>
<li><p>分散读取(Scattering Reads)从Channel中读取数据”分散多个buffer中”</p>
<p>按照缓冲区的顺序从Channel中读取的数据依次将Buffer填满</p>
<p><img src="/2021/01/18/NIO/image-20210118214112865.png" alt="image-20210118214112865"></p>
</li>
<li><p>聚集写入(Gather Writes):是指将多个 Buffer 中的数据“聚集”到 Channel</p>
<p>注意：按照缓冲区的顺序，写入 position 和 limit 之间的数据到 Channel </p>
</li>
</ul>
<p><img src="/2021/01/18/NIO/image-20210118214139698.png" alt="image-20210118214139698"></p>
<p>​    分散/聚集I/O对于将数据划分为几个部分很有用。例如，可能在编写一个使用消息对象的网络应用程序，每一个消息被划分为固定长度的头部和固定长度的正文。可以创建一个刚好可以容纳头部的缓冲区和另一个刚好可以容难正文的缓冲区。当将它们放入一个数组中并使用分散读取来向它们读入消息时，头部和正文将整齐地划分到这 两个缓冲区中。<br>​    从缓冲区所得到的方便性对于缓冲区数组同样有效。因为每一个缓冲区都跟踪自己还可以接受多少数据，所以分散读取会自动找到有空间接受数据的第一个缓冲区。在这个缓冲区填满后，它就会移动到下一个缓冲区</p>
<p>​    聚集写对于把一组单独的缓冲区中组成单个数据流很有用。为了与上面的消息例子保持一致，您可以使用聚集写入来自动将网络消息的各个部分组装为单个数据流，以便跨越网络传输消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">	RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;d:/1.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//1. 获取通道</span></span><br><span class="line">	FileChannel channel1 = raf1.getChannel();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2. 分配指定大小的缓冲区</span></span><br><span class="line">	ByteBuffer buf1 = ByteBuffer.allocate(<span class="number">300</span>);</span><br><span class="line">	ByteBuffer buf2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3. 分散读取</span></span><br><span class="line">	ByteBuffer[] bufs = &#123;buf1, buf2&#125;;</span><br><span class="line">	<span class="comment">//这里的方法是工厂方式模式，本机没有下载rt.jar包的源代码，不分析FileChannelImpl.java文件了</span></span><br><span class="line">	<span class="comment">//大概就是轮训缓冲区数组，然后从下标0开始轮训，依次写满</span></span><br><span class="line">	channel1.read(bufs);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (ByteBuffer byteBuffer : bufs) &#123;</span><br><span class="line">		byteBuffer.flip();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="keyword">new</span> String(bufs[<span class="number">0</span>].array(), <span class="number">0</span>, bufs[<span class="number">0</span>].limit()));</span><br><span class="line">	System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">	System.out.println(<span class="keyword">new</span> String(bufs[<span class="number">1</span>].array(), <span class="number">0</span>, bufs[<span class="number">1</span>].limit()));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4. 聚集写入</span></span><br><span class="line">	RandomAccessFile raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;d:/2.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">	FileChannel channel2 = raf2.getChannel();</span><br><span class="line">	</span><br><span class="line">	channel2.write(bufs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>NIO</tag>
      </tags>
  </entry>
</search>
